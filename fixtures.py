from sqlalchemy import Engine
import random


from datetime import datetime, timedelta

import os
from dataclasses import dataclass
from dotenv import load_dotenv
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, Float, DateTime, ForeignKey, Index, text

load_dotenv()

@dataclass
class Settings:
    DATABASE_URL: str = "postgresql+psycopg://user:password@localhost:5432/dbname"
    POOL_SIZE: int = 20
    MAX_OVERFLOW: int = 30
    POOL_TIMEOUT: int = 30
    POOL_RECYCLE: int = 3600
    
    @classmethod
    def from_env(cls) -> 'Settings':
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return cls(
            DATABASE_URL=os.getenv('DATABASE_URL'),
            POOL_SIZE=int(os.getenv('POOL_SIZE', cls.POOL_SIZE)),
            MAX_OVERFLOW=int(os.getenv('MAX_OVERFLOW', cls.MAX_OVERFLOW)),
            POOL_TIMEOUT=int(os.getenv('POOL_TIMEOUT', cls.POOL_TIMEOUT)),
            POOL_RECYCLE=int(os.getenv('POOL_RECYCLE', cls.POOL_RECYCLE)),
        )

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
settings = Settings.from_env()
engine = create_engine(
    settings.DATABASE_URL,
    pool_size=settings.POOL_SIZE,
    max_overflow=settings.MAX_OVERFLOW,
    pool_timeout=settings.POOL_TIMEOUT,
    pool_recycle=settings.POOL_RECYCLE,
    echo=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
)
metadata = MetaData()


# –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –∏—Å–∫–æ–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ü–µ–ª–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
users = Table(
    'users',
    metadata,
    Column('id', Integer, primary_key=True),
    Column('name', String),
    Column('gender', String),
    Column('age', Integer) # Change to Integer
)

heart_rates = Table(
    'heart_rates',
    metadata,
    Column('id', Integer, primary_key=True),
    Column('user_id', Integer, ForeignKey('users.id'), index=True),
    Column('timestamp', DateTime),
    Column('heart_rate', Float),
)

# –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
# Index('idx_users_age_gender', users.c.age, users.c.gender)  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# Index('idx_users_gender_age', users.c.gender, users.c.age)  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# Index('idx_heart_rates_timestamp', heart_rates.c.timestamp)  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
# Index('idx_heart_rates_timestamp_user', heart_rates.c.timestamp, heart_rates.c.user_id)  # –°–æ—Å—Ç–∞–≤–Ω–æ–π –¥–ª—è JOIN + –≤—Ä–µ–º—è
# Index('idx_heart_rates_user_timestamp', heart_rates.c.user_id, heart_rates.c.timestamp)  # –î–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


def load_large_fixtures(engine: Engine, users_count: int = 10000, target_heart_rate_records: int = 2500000):
    """
    –°–æ–∑–¥–∞–µ—Ç –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Args:
        engine: SQLAlchemy engine
        users_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10,000)
        target_heart_rate_records: —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø—É–ª—å—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.5–ú)
    """
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {users_count:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ~{target_heart_rate_records:,} –∑–∞–ø–∏—Å–µ–π –ø—É–ª—å—Å–∞...")
    
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    _generate_users_batch(engine, users_count)
    
    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ø—É–ª—å—Å–∞
    print("üíì –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø—É–ª—å—Å–∞...")
    _generate_heart_rates_batch(engine, users_count, target_heart_rate_records)
    
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def _generate_users_batch(engine: Engine, users_count: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    # –°–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–º–µ–Ω
    first_names_male = ["John", "Mike", "David", "Chris", "Alex", "Daniel", "James", "Robert", "William", "Thomas"]
    first_names_female = ["Anna", "Sarah", "Emma", "Lisa", "Kate", "Maria", "Jennifer", "Jessica", "Ashley", "Amanda"]
    last_names = ["Smith", "Johnson", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor", "Anderson", "Thomas", 
                  "Jackson", "White", "Harris", "Martin", "Thompson", "Garcia", "Martinez", "Robinson", "Clark", "Rodriguez"]
    
    batch_size = 10000
    total_batches = (users_count + batch_size - 1) // batch_size
    
    with engine.connect() as conn:
        for batch_num in range(total_batches):
            start_idx = batch_num * batch_size
            end_idx = min(start_idx + batch_size, users_count)
            batch_data = []
            
            for i in range(start_idx, end_idx):
                # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
                gender = random.choice(['male', 'female'])
                age = _generate_realistic_age()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è
                if gender == 'male':
                    first_name = random.choice(first_names_male)
                else:
                    first_name = random.choice(first_names_female)
                
                last_name = random.choice(last_names)
                name = f"{first_name} {last_name}"
                
                batch_data.append({
                    "name": name,
                    "gender": gender,
                    "age": age
                })
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞—Ç—á
            conn.execute(users.insert(), batch_data)
            
            if batch_num % 10 == 0:  # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
                progress = (batch_num + 1) / total_batches * 100
                print(f"  üë• –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {progress:.1f}% ({end_idx:,}/{users_count:,})")
        
        conn.commit()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {users_count:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def _generate_heart_rates_batch(engine: Engine, users_count: int, target_records: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ø—É–ª—å—Å–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    start_date = datetime(2023, 1, 1)  # –ì–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    end_date = datetime(2024, 1, 1)
    total_days = (end_date - start_date).days
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    avg_records_per_user = target_records // users_count
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_records_per_user}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_profiles = _generate_user_activity_profiles(users_count, avg_records_per_user)
    
    batch_size = 10000  # –ó–∞–ø–∏—Å–µ–π –≤ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ
    current_batch = []
    total_generated = 0
    
    with engine.connect() as conn:
        for user_id in range(1, users_count + 1):
            records_for_user = user_profiles[user_id - 1]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_records = _generate_user_heart_rate_records(
                user_id, records_for_user, start_date, total_days
            )
            
            current_batch.extend(user_records)
            total_generated += len(user_records)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞—Ç—á –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è
            if len(current_batch) >= batch_size:
                conn.execute(heart_rates.insert(), current_batch)
                current_batch = []
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = total_generated / target_records * 100
                print(f"  üíì –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–∏—Å–µ–π: {progress:.1f}% ({total_generated:,}/{target_records:,})")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
        if current_batch:
            conn.execute(heart_rates.insert(), current_batch)
        
        conn.commit()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {total_generated:,} –∑–∞–ø–∏—Å–µ–π –ø—É–ª—å—Å–∞")
    return total_generated

def _generate_realistic_age():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º"""
    # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç ~35, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ~15
    age = int(random.normalvariate(35, 15))
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    return max(16, min(85, age))

def _generate_user_activity_profiles(users_count: int, avg_records: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    80% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–±—ã—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    15% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
    5% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    """
    profiles = []
    
    for i in range(users_count):
        activity_type = random.random()
        
        if activity_type < 0.05:  # 5% - –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            records = int(avg_records * random.uniform(0.1, 0.3))
        elif activity_type < 0.20:  # 15% - –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            records = int(avg_records * random.uniform(1.5, 3.0))
        else:  # 80% - –æ–±—ã—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            records = int(avg_records * random.uniform(0.7, 1.3))
        
        profiles.append(max(1, records))  # –ú–∏–Ω–∏–º—É–º 1 –∑–∞–ø–∏—Å—å
    
    return profiles

def _generate_user_heart_rate_records(user_id: int, records_count: int, start_date: datetime, total_days: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ø—É–ª—å—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ë–∞–∑–æ–≤—ã–π –ø—É–ª—å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ (—É—Å–ª–æ–≤–Ω–æ)
    base_heart_rate = random.uniform(65, 85)
    
    records = []
    
    for _ in range(records_count):
        # –°–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å –≤ –≥–æ–¥—É
        day_offset = random.randint(0, total_days - 1)
        random_date = start_date + timedelta(days=day_offset)
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è (—É—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã)
        hour = _generate_realistic_hour()
        minute = random.randint(0, 59)
        second = random.randint(0, 59)
        
        timestamp = random_date.replace(
            hour=hour, 
            minute=minute, 
            second=second
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—É–ª—å—Å
        heart_rate = _generate_realistic_heart_rate(base_heart_rate, hour)
        
        records.append({
            "user_id": user_id,
            "timestamp": timestamp,
            "heart_rate": heart_rate
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    records.sort(key=lambda x: x["timestamp"])
    
    return records

def _generate_realistic_hour():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —á–∞—Å–∞ (–±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–Ω–µ–º)"""
    # –í–µ—Å–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –±–æ–ª—å—à–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
    weights = [
        1, 1, 1, 1, 1, 2,  # 0-5: –Ω–æ—á—å, —Ä–µ–¥–∫–æ
        4, 6, 8, 8, 7, 6,  # 6-11: —É—Ç—Ä–æ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç
        8, 7, 6, 8, 9, 8,  # 12-17: –¥–µ–Ω—å, –ø–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        7, 6, 4, 3, 2, 1   # 18-23: –≤–µ—á–µ—Ä, —Å–ø–∞–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    ]
    
    return random.choices(range(24), weights=weights)[0]

def _generate_realistic_heart_rate(base_rate: float, hour: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø—É–ª—å—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    if 0 <= hour <= 5:  # –ù–æ—á—å - –ø—É–ª—å—Å –Ω–∏–∂–µ
        multiplier = random.uniform(0.8, 0.9)
    elif 6 <= hour <= 11:  # –£—Ç—Ä–æ - —É–º–µ—Ä–µ–Ω–Ω—ã–π
        multiplier = random.uniform(0.9, 1.1)
    elif 12 <= hour <= 17:  # –î–µ–Ω—å - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
        multiplier = random.uniform(1.0, 1.3)
    else:  # –í–µ—á–µ—Ä - —É–º–µ—Ä–µ–Ω–Ω—ã–π
        multiplier = random.uniform(0.9, 1.1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é
    variation = random.uniform(-8, 12)
    heart_rate = base_rate * multiplier + variation
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    return max(45, min(180, round(heart_rate)))


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    load_large_fixtures(
        engine, 
        users_count=10000,
        target_heart_rate_records=2500000
    )
    